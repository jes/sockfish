#!/usr/bin/perl

use strict;
use warnings;

use lib 'lib';

use Time::HiRes qw(usleep);
use Chess::Rep;
use Try::Tiny;
use IO::Select;
use Sockfish::Stockfish;

my $game = Chess::Rep->new;
my $bestmove;
my @undolist; # fen

my $state = 'inactive';

my $rank = 0;
my $file = 0;
my $from;
my $move;

my $turn = 1;

my $vibrate_time = 0.6;

my %keymap = (
    A0 => 1,
    A1 => 2,
    A3 => 3,
    A2 => 4,
    24 => 5,
);

my $engine = Sockfish::Stockfish->new;

$| = 1;

# initialisation notification
vibrate(300,300);
vibrate(300,300);
vibrate(300,300);
vibrate(300,300);

# TODO: move all this to python so that it is more in sync with the IO? Or at least flush all inputs in input() before waiting to accept any
# TODO: a way to query the current state?
# TODO: support promotion to non-queen

LOOP: while (1) {
    my $ch = input();

    if ($state ne 'inactive') {
        if ($ch eq '5') {
            vibrate(300,300);
            vibrate(300,300);
            vibrate(300,300);
            vibrate(300,300);
            tostate('inactive');
            next LOOP;
        }
    }

    if ($state eq 'inactive') {
        if ($ch eq '5') {
            goodinput();
            newgame();
            my $input = wait_input(1.0);
            $turn = !$turn if $input eq '5'; # 2 presses = black
            tostate('getfrom');
        }
    } elsif ($state eq 'getfrom') {
        $file++ if $ch eq '2';
        $rank++ if $ch eq '3';
        if ($ch eq '1') {
            if ($file == 0) { $file = 5; } # 'e'
            elsif ($rank == 0) { $rank = 5; } # '5'
        }
        if ($ch eq '4') {
            if ($file == 0 && $rank == 0 && ($turn || forcedmove())) {
                playmove(bestmove());
                goodinput();
                tostate('getfrom');
            } elsif ($file >= 1 && $file <= 8 && $rank >= 1 && $rank <= 8) {
                $from = chr($file + ord('a') - 1) . $rank;
                print STDERR "Input from: $from\n";
                if (canmove($from)) {
                    goodinput();
                    tostate('getto');
                } else {
                    my $move = getmoveto($from);
                    print STDERR "getmoveto($from) = $move\n";
                    if ($move) {
                        # if only one piece can move to this square, move it
                        try {
                            print STDERR "Try $move...\n";
                            playmove($move);
                            print STDERR "It's a good move!\n";
                            goodinput();
                        } catch {
                            print STDERR "It's a BAD move!\n";
                            badinput();
                        };
                    } elsif (!occupied($from)) {
                        # if this square is a legal pawn move, move the pawn
                        try {
                            playmove($from); # pawn move
                            goodinput();
                        } catch {
                            try {
                                playmove($from . 'q'); # pawn move with promotion
                                goodinput();
                            } catch {
                                badinput();
                            };
                        };
                    } else {
                        badinput();
                    }
                    tostate('getfrom');
                }
            } elsif ($file == 9 && $rank == 9) { # I9 == swap turn
                $turn = !$turn;
                goodinput();
                tostate('getfrom');
            } elsif ($file == 10 && $rank == 10) { # J10 == undo
                undo();
                goodinput();
                tostate('getfrom');
            } else {
                badinput();
                tostate('getfrom');
            }
        }
    } elsif ($state eq 'getto') {
        $file++ if $ch eq '2';
        $rank++ if $ch eq '3';
        if ($ch eq '1') {
            if ($file == 0) { $file = 5; } # 'e'
            elsif ($rank == 0) { $rank = 5; } # '5'
        }
        if ($ch eq '4') {
            my ($fromfile, $fromrank) = split //, $from;
            $file = ord($fromfile)-ord('a')+1 if $file == 0 && $rank != 0;
            $rank = $fromrank if $rank == 0 && $file != 0;
            if ($file >= 1 && $file <= 8 && $rank >= 1 && $rank <= 8) {
                my $to = chr($file + ord('a') - 1) . $rank;
                $move = "$from$to";
                $move .= 'q' if promotion($move);
                print STDERR "Input to: $to; move=$move\n";
                try {
                    playmove($move);
                    goodinput();
                } catch {
                    badinput();
                };
                tostate('getfrom');
            } else {
                badinput();
                tostate('getfrom');
            }
        }
    }
}

sub tostate {
    my ($s) = @_;

    print STDERR "TO $s\n";

    $state = $s;

    $file = 0;
    $rank = 0;

    if ($state eq 'getfrom') {
        outputmove(bestmove()) if $turn;
    }
}

# discard any pending input
sub discard_input {
    my $s = IO::Select->new;
    $s->add(\*STDIN);
    <> while $s->can_read(0.01);
}

sub input_ready {
    my ($timeout) = @_;

    my $s = IO::Select->new;
    $s->add(\*STDIN);
    return $s->can_read($timeout);
}

sub wait_input {
    my ($timeout) = @_;

    if (input_ready($timeout)) {
        my $l = <>;
        chomp $l;
        return $keymap{$l}||$l;
    } else {
        return undef;
    }
}

sub input {
    discard_input();

    my $l = <>;
    chomp $l;
    vibrate(150,50);
    return $keymap{$l}||$l;
}

sub outputmove {
    my ($move) = @_;

    $move =~ /^(..)(..)/ or die "bad move: [$move]??";
    my ($from, $to) = ($1, $2);

    usleep(300_000);

    # don't output the "from" square if there's only 1 possible move to the "to" square
    if (!getmoveto($to)) {
        my $r = outputsquare($from);
        shortgoodinput();
        return if $r eq '1' || $r eq '5';
        usleep(300_000);
    }

    my $fromfile = substr($from,0,1);
    my $tofile = substr($to,0,1);

    # skip first file if file is the same and we already output the "from" square, to save time
    outputsquare($to, skipfirstfile => ($fromfile eq $tofile && !getmoveto($to)));
    shortgoodinput();
}

sub outputsquare {
    my ($square, %opts) = @_;

    my ($file,$rank) = split //, $square;
    $file = ord($file)-ord('a')+1;

    usleep(200_000);

    discard_input();

    while(1) {
        my $input;
        if (!$opts{skipfirstfile}) {
            $input = outputnum($file, 'l');
            return $input if defined $input;
        }
        $opts{skipfirstfile} = 0;

        $input = outputnum($rank, 'r');
        return $input if defined $input;

        $input = wait_input(0.5);
        return $input if defined $input;
    }
}

sub outputnum {
    my ($n, $side) = @_;
    my $vibrate = ($side eq 'l') ? \&lvibrate : \&rvibrate;
    if ($n >= 5) {
        $vibrate->(500,150);
        $n -= 5;
    }
    for (1 .. $n) {
        return wait_input(0) if input_ready(0);
        $vibrate->(150,150);
    }
    usleep(200_000);
    return undef;
}

sub badinput {
    vibrate(500, 100);
    vibrate(100, 100) for (1..3);
}

sub goodinput {
    vibrate(200, 200);
}

sub shortgoodinput {
    vibrate(150, 100);
}

# times in ms
sub lvibrate {
    my ($ontime, $offtime) = @_;
    print "l on\n";
    usleep($ontime * 1000 * $vibrate_time);
    print "l off\n";
    usleep($offtime * 1000 * $vibrate_time);
}

# times in ms
sub rvibrate {
    my ($ontime, $offtime) = @_;
    print "r on\n";
    usleep($ontime * 1000 * $vibrate_time);
    print "r off\n";
    usleep($offtime * 1000 * $vibrate_time);
}

# times in ms
sub vibrate {
    my ($ontime, $offtime) = @_;
    print "l on\nr on\n";
    usleep($ontime * 1000 * $vibrate_time);
    print "l off\nr off\n";
    usleep($offtime * 1000 * $vibrate_time);
}

sub newgame {
    $game = Chess::Rep->new;
    $turn = 1;
    $bestmove = undef;
    @undolist = ();
}

sub undo {
    if (@undolist) {
        print STDERR "UNDO\n";
        $game = Chess::Rep->new(pop @undolist);
        $turn = !$turn;
        $bestmove = undef;
    }
}

sub bestmove {
    $bestmove = compute_bestmove() if !$bestmove;
    return $bestmove;
}

sub compute_bestmove {
    my $fen = $game->get_fen;
    print STDERR "Calculating: $fen\n";
    my $move = $engine->solve($fen);
    print STDERR "Calculated: $move\n";
    return $move;
}

sub playmove {
    my ($move) = @_;

    my $fen = $game->get_fen;

    $game->go_move($move); # dies if move is illegal

    push @undolist, $fen;
    $turn = !$turn;
    $bestmove = undef;

    print STDERR "PLAY MOVE: $move\n";
}

sub promotion {
    my ($move) = @_;

    $move =~ /(..)(..)/;
    my $from = $1;
    my $to = $2;

    # moving a pawn to the 1st or 8th rank is a promotion
    return ($game->get_piece_at($from) & 0x1) && ($to =~ /[18]/);
}

# can a piece on $sqr move?
sub canmove {
    my ($sqr) = @_;
    my $index = Chess::Rep::get_index($sqr);
    my @moves = grep { $_->{from} == $index } @{ $game->status->{moves} };
    return @moves > 0;
}

# is $sqr occupied?
sub occupied {
    my ($sqr) = @_;
    return !!$game->get_piece_at($sqr);
}

# return the only move that lands on $sqr, or undef if there is none or it's ambiguous
sub getmoveto {
    my ($sqr) = @_;
    my $index = Chess::Rep::get_index($sqr);
    print STDERR "Index for $sqr is $index\n";
    my @moves = grep { $_->{to} == $index } @{ $game->status->{moves} };
    print STDERR "There are " . (scalar @moves) . " moves to $sqr\n";
    return undef unless @moves == 1;
    my $m = $moves[0];
    my $move = Chess::Rep::get_field_id($m->{from}) . Chess::Rep::get_field_id($m->{to});
    $move .= 'q' if promotion($move);
    return lc $move; # needs to be lc else moves on the B file get parsed as Bishop moves...
}

sub forcedmove {
    return @{ $game->{status}->{moves} } == 1;
}
