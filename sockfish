#!/usr/bin/perl

use strict;
use warnings;

use Time::HiRes qw(usleep);
use Chess::Rep;

my $game = Chess::Rep->new;
my $bestmove;
my @undolist; # fen

my $state = 'inactive';

my $rank = 0;
my $file = 0;
my $from;
my $move;

my %keymap = (
    14 => 1,
    15 => 2,
    16 => 3,
    17 => 4,
);

$| = 1;

# TODO: require multiple presses to activate in a short time
# TODO: some way to deactivate by multiple presses of 1 in a short time
# TODO: repeat "output_move" if no input within a few seconds?

while (1) {
    my $ch = input();

    if ($state eq 'inactive') {
        if ($ch eq '2') {
            goodinput();
            newgame();
            outputmove(bestmove());
            $rank = 0;
            $file = 0;
            $state = 'getfrom';
        }
    } elsif ($state eq 'getfrom') {
        $file++ if $ch eq '2';
        $rank++ if $ch eq '3';
        if ($ch eq '4') {
            if ($file == 0 && $rank == 0) {
                $move = bestmove();
                $state = 'getconfirmation';
                goodinput();
                outputmove($move);
            } elsif ($file >= 1 && $file <= 8 && $rank >= 1 && $rank <= 8) {
                $from = chr($file + ord('a') - 1) . $rank;
                $rank = 0;
                $file = 0;
                $state = 'getto';
                goodinput();
            } else {
                $rank = 0;
                $file = 0;
                badinput();
                outputmove(bestmove());
            }
        }
        if ($ch eq '1') {
            badinput();
            outputmove(bestmove());
            $file = 0;
            $rank = 0;
        }
    } elsif ($state eq 'getto') {
        $file++ if $ch eq '2';
        $rank++ if $ch eq '3';
        if ($ch eq '4') {
            if ($file >= 1 && $file <= 8 && $rank >= 1 && $rank <= 8) {
                $move = $from . chr($file + ord('a') - 1) . $rank;
                $rank = 0;
                $file = 0;
                $state = 'getconfirmation';
                goodinput();
                outputmove($move);
            } else {
                $rank = 0;
                $file = 0;
                badinput();
                outputmove(bestmove());
                $state = 'getfrom';
            }
        }
        if ($ch eq '1') {
            $rank = 0;
            $file = 0;
            badinput();
            outputmove(bestmove());
            $state = 'getfrom';
        }
    } elsif ($state eq 'getconfirmation') {
        if ($ch eq '4') {
            playmove($move);
            $rank = 0;
            $file = 0;
            $state = 'getfrom';
            goodinput();
            outputmove(bestmove());
        }
        if ($ch eq '1') {
            $rank = 0;
            $file = 0;
            badinput();
            outputmove(bestmove());
            $state = 'getfrom';
        }
    }
}

sub input {
    my $l = <>;
    chomp $l;
    return $keymap{$l}||$l;
}

sub outputmove {
    my ($move) = @_;
    my ($fromfile, $fromrank, $tofile, $torank) = split //, $move;
    $fromfile = ord($fromfile) - ord('a') + 1;
    $tofile = ord($tofile) - ord('a') + 1;

    lvibrate(200,200) for (1 .. $fromfile);
    rvibrate(200,200) for (1 .. $fromrank);
    lvibrate(200,200) for (1 .. $tofile);
    rvibrate(200,200) for (1 .. $torank);

    print 'l'x$fromfile . 'r'x$fromrank . ' v ' . 'l'x$tofile . 'r'x$torank . "\n";
}

sub badinput {
    vibrate(500, 100);
    vibrate(100, 100) for (1..3);
}

sub goodinput {
    vibrate(100, 100);
}

# times in ms
sub lvibrate {
    my ($ontime, $offtime) = @_;
    print "l on\n";
    usleep($ontime * 1000);
    print "l off\n";
    usleep($offtime * 1000);
}

# times in ms
sub rvibrate {
    my ($ontime, $offtime) = @_;
    print "r on\n";
    usleep($ontime * 1000);
    print "r off\n";
    usleep($offtime * 1000);
}

# times in ms
sub vibrate {
    my ($ontime, $offtime) = @_;
    print "l on\nr on\n";
    usleep($ontime * 1000);
    print "l off\nr off\n";
    usleep($offtime * 1000);
}

sub newgame {
    $game = Chess::Rep->new;
    $bestmove = compute_bestmove();
    @undolist = ();
}

sub undo {
    $game = Chess::Rep->new(pop @undolist) if @undolist;
}

sub bestmove {
    return $bestmove;
}

sub compute_bestmove {
    my $fen = $game->get_fen;
    my $move = `./solve $fen`;
    chomp $move;
    return $move;
}

sub playmove {
    my ($move) = @_;

    push @undolist, $game->get_fen;

    $game->go_move($move);
    $bestmove = compute_bestmove();
}
