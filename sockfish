#!/usr/bin/perl

use strict;
use warnings;

use lib 'lib';

use Time::HiRes qw(usleep);
use Chess::Rep;
use Try::Tiny;
use IO::Select;
use Sockfish::Stockfish;

my $game = Chess::Rep->new;
my $bestmove;
my @undolist; # fen

my $state = 'inactive';

my $rank = 0;
my $file = 0;
my $from;
my $move;

my $turn = 1;

my %keymap = (
    20 => 1,
    16 => 2,
    15 => 3,
    14 => 4,
    24 => 5,
);

my $engine = Sockfish::Stockfish->new;

$| = 1;

# initialisation notification
vibrate(300,300);
vibrate(300,300);
vibrate(300,300);
vibrate(300,300);

# TODO: move all this to python so that it is more in sync with the IO? Or at least flush all inputs in input() before waiting to accept any
# TODO: a way to query the current state?
# TODO: support promotion to non-queen

LOOP: while (1) {
    my $ch = input();

    if ($state ne 'inactive') {
        if ($ch eq '5') {
            vibrate(300,300);
            vibrate(300,300);
            vibrate(300,300);
            vibrate(300,300);
            tostate('inactive');
            next LOOP;
        }
    }

    if ($state eq 'inactive') {
        if ($ch eq '5') {
            goodinput();
            newgame();
            tostate('getfrom');
        }
    } elsif ($state eq 'getfrom') {
        $file++ if $ch eq '2';
        $rank++ if $ch eq '3';
        if ($ch eq '1') {
            if ($file == 0) { $file = 5; } # 'e'
            elsif ($rank == 0) { $rank = 5; } # '5'
        }
        if ($ch eq '4') {
            if ($file == 0 && $rank == 0 && $turn) {
                playmove(bestmove());
                goodinput();
                tostate('getfrom');
            } elsif ($file >= 1 && $file <= 8 && $rank >= 1 && $rank <= 8) {
                $from = chr($file + ord('a') - 1) . $rank;
                goodinput();
                tostate('getto');
            } elsif ($file == 9 && $rank == 9) { # I9 == swap turn
                $turn = !$turn;
                goodinput();
                tostate('getfrom');
            } elsif ($file == 10 && $rank == 10) { # J10 == undo
                undo();
                goodinput();
                tostate('getfrom');
            } else {
                badinput();
                tostate('getfrom');
            }
        }
    } elsif ($state eq 'getto') {
        $file++ if $ch eq '2';
        $rank++ if $ch eq '3';
        if ($ch eq '1') {
            if ($file == 0) { $file = 5; } # 'e'
            elsif ($rank == 0) { $rank = 5; } # '5'
        }
        if ($ch eq '4') {
            my ($fromfile, $fromrank) = split //, $from;
            $file = ord($fromfile)-ord('a')+1 if $file == 0 && $rank != 0;
            $rank = $fromrank if $rank == 0 && $file != 0;
            if ($file >= 1 && $file <= 8 && $rank >= 1 && $rank <= 8) {
                my $to = chr($file + ord('a') - 1) . $rank;
                $move = "$from$to";

                $move .= 'q' if promotion($move);
                try {
                    playmove($move);
                    goodinput();
                } catch {
                    badinput();
                };
                tostate('getfrom');
            } else {
                badinput();
                tostate('getfrom');
            }
        }
    }
}

sub tostate {
    my ($s) = @_;

    print STDERR "TO $s\n";

    $state = $s;

    $file = 0;
    $rank = 0;

    if ($state eq 'getfrom') {
        outputmove(bestmove()) if $turn;
    }
}

# discard any pending input
sub discard_input {
    my $s = IO::Select->new;
    $s->add(\*STDIN);
    <> while $s->can_read(0.01);
}

sub input_ready {
    my ($timeout) = @_;

    my $s = IO::Select->new;
    $s->add(\*STDIN);
    return $s->can_read($timeout);
}

sub wait_input {
    my ($timeout) = @_;

    if (input_ready($timeout)) {
        my $l = <>;
        chomp $l;
        return $keymap{$l}||$l;
    } else {
        return undef;
    }
}

sub input {
    discard_input();

    my $l = <>;
    chomp $l;
    vibrate(150,50);
    return $keymap{$l}||$l;
}

sub outputmove {
    my ($move) = @_;

    $move =~ /^(..)(..)/ or die "bad move: [$move]??";
    my ($from, $to) = ($1, $2);

    usleep(300_000);

    my $r = outputsquare($from);
    return if $r eq '1' || $r eq '5';

    outputsquare($to);
}

sub outputsquare {
    my ($square) = @_;

    my ($file,$rank) = split //, $square;
    $file = ord($file)-ord('a')+1;

    usleep(200_000);

    discard_input();

    while(1) {
        for (1 .. $file) {
            return wait_input(0) if input_ready(0);
            lvibrate(150,150);
        }
        usleep(200_000);
        for (1 .. $rank) {
            return wait_input(0) if input_ready(0);
            rvibrate(150,150);
        }
        usleep(200_000);

        my $input = wait_input(0.5);
        return $input if defined $input;
    }
}

sub badinput {
    vibrate(500, 100);
    vibrate(100, 100) for (1..3);
}

sub goodinput {
    vibrate(200, 200);
}

# times in ms
sub lvibrate {
    my ($ontime, $offtime) = @_;
    print "l on\n";
    usleep($ontime * 1000);
    print "l off\n";
    usleep($offtime * 1000);
}

# times in ms
sub rvibrate {
    my ($ontime, $offtime) = @_;
    print "r on\n";
    usleep($ontime * 1000);
    print "r off\n";
    usleep($offtime * 1000);
}

# times in ms
sub vibrate {
    my ($ontime, $offtime) = @_;
    print "l on\nr on\n";
    usleep($ontime * 1000);
    print "l off\nr off\n";
    usleep($offtime * 1000);
}

sub newgame {
    $game = Chess::Rep->new;
    $turn = 1;
    $bestmove = undef;
    @undolist = ();
}

sub undo {
    if (@undolist) {
        print STDERR "UNDO\n";
        $game = Chess::Rep->new(pop @undolist);
        $turn = !$turn;
        $bestmove = undef;
    }
}

sub bestmove {
    $bestmove = compute_bestmove() if !$bestmove;
    return $bestmove;
}

sub compute_bestmove {
    my $fen = $game->get_fen;
    print STDERR "Calculating: $fen\n";
    my $move = $engine->solve($fen);
    print STDERR "Calculated: $move\n";
    return $move;
}

sub playmove {
    my ($move) = @_;

    my $fen = $game->get_fen;

    $game->go_move($move); # dies if move is illegal

    push @undolist, $fen;
    $turn = !$turn;
    $bestmove = undef;

    print STDERR "PLAY MOVE: $move\n";
}

sub promotion {
    my ($move) = @_;

    $move =~ /(..)(..)/;
    my $from = $1;
    my $to = $2;

    # moving a pawn to the 1st or 8th rank is a promotion
    return ($game->get_piece_at($from) & 0x1) && ($to =~ /[18]/);
}
